{"version":3,"sources":["resources/imgs/SimplesLogo.png","components/Header.tsx","service/Service.ts","service/HomePageService.ts","pages/HomePage.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","props","menu","map","val","key","to","label","children","className","src","logoImg","alt","Service","infoWine","infoAuthor","menuInfo","items","logo","HomePageService","infoHomePage","welcomeText","service","homePageService","HomePage","Routes","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"q6BAAAA,EAAOC,QAAU,IAA0B,yC,uqOCuC5BC,G,MA3BgC,SAACC,GAC5C,IAAMC,EAAOD,EAAMC,KAAKC,KAAI,SAAAC,GACxB,OAAO,kBAAC,IAAD,CACHC,IAAKD,EAAIE,GAAGF,EAAIG,MAChBD,GAAIF,EAAIE,GACRE,SAAUJ,EAAIG,WAItB,OAAO,4BAAQE,UAAU,eAErB,yBAAKA,UAAU,eACX,yBACIA,UAAU,UACVC,IAAKT,EAAMU,QACXC,IAAI,yBAGZ,yBAAKH,UAAU,cACX,6BACKP,O,wDCHIW,E,8FAGb,OAAOC,I,6BAIP,OAAOC,I,2BAIP,OAAOC,EAASC,Q,8BAIhB,OAAOC,Q,aC1CMC,E,oGAGb,OAAOC,EAAaC,gB,KCAtBC,EAAU,IAAIT,EACdU,EAAkB,IAAIJ,EAWbK,EATY,WACvB,OAAO,oCACH,kBAAC,EAAD,CAAQtB,KAAMoB,EAAQpB,KAAMS,QAASW,EAAQX,UAC7C,8BACKY,EAAgBF,eCRd,SAASI,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWH,M,MCG5BI,MANf,WACE,OACE,kBAACH,EAAD,OCKgBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.496be012.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SimplesLogo.b26d6fcd.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\nexport interface HeaderProps {\n    menu: {\n       label: string\n       to: string \n    }[]\n    logoImg: string\n}\n\nexport const Header : React.FC <HeaderProps> = (props: HeaderProps) => {\n    const menu = props.menu.map(val => {\n        return <Link\n            key={val.to+val.label}\n            to={val.to}\n            children={val.label}\n        />;\n    });\n\n    return <header className=\"header-comp\">\n        \n        <div className=\"logoWrapper\">\n            <img \n                className=\"logoImg\"\n                src={props.logoImg}\n                alt=\"Simples Vinhos Logo\">\n            </img>\n        </div>\n        <div className=\"navWrapper\">\n            <nav>\n                {menu}\n            </nav>\n        </div>\n\n    </header>;\n};\n\nexport default Header;","import infoAuthor from '../config/InfoAuthor.json';\nimport infoWine from '../config/InfoWine.json';\nimport menuInfo from '../config/Menu.json';\nimport logo from '../resources/imgs/SimplesLogo.png';\n\nexport interface Wine {\n    name: string\n    type: string\n    description: string\n    imgUrl: string\n    price: number\n}\n\nexport interface Author {\n    name: string\n    about: string\n    imgUrl: string\n    contact: {\n        whatsapp: string\n        instagram?: string\n        facebook?: string\n    }\n}\n\nexport interface MenuItem {\n    label: string\n    to: string\n}\n\nexport default class Service {\n\n    public get wines() : Wine[] {\n        return infoWine;\n    }\n\n    public get author() : Author {\n        return infoAuthor;\n    }\n\n    public get menu() : MenuItem[] {\n        return menuInfo.items;\n    }\n\n    public get logoImg() : string {\n        return logo;\n    }\n\n}","import infoHomePage from '../config/InfoHomePage.json';\n\nexport default class HomePageService {\n\n    public get welcomeText(): string {\n        return infoHomePage.welcomeText;\n    }\n\n}","import React from 'react';\nimport Header from '../components/Header';\nimport Service from '../service/Service';\nimport HomePageService from '../service/HomePageService';\n\nconst service = new Service();\nconst homePageService = new HomePageService();\n\nconst HomePage: React.FC = () => {\n    return <>\n        <Header menu={service.menu} logoImg={service.logoImg} />\n        <main>\n            {homePageService.welcomeText}\n        </main>\n    </>;\n}\n\nexport default HomePage;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\n\nexport default function Routes(){\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" component={HomePage}/>\n            </Switch>\n        </BrowserRouter>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport Routes from './Routes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}